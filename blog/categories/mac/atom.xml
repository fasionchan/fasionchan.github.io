<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mac | fasionchan]]></title>
  <link href="http://blog.fasionchan.com/blog/categories/mac/atom.xml" rel="self"/>
  <link href="http://blog.fasionchan.com/"/>
  <updated>2017-06-18T11:40:45+08:00</updated>
  <id>http://blog.fasionchan.com/</id>
  <author>
    <name><![CDATA[陈彦霏]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[打造炫酷的开发环境]]></title>
    <link href="http://blog.fasionchan.com/blog/2016/12/17/da-zao-xuan-ku-de-kai-fa-huan-jing/"/>
    <updated>2016-12-17T21:20:34+08:00</updated>
    <id>http://blog.fasionchan.com/blog/2016/12/17/da-zao-xuan-ku-de-kai-fa-huan-jing</id>
    <content type="html"><![CDATA[<p>无图无真相，这篇文章的主要目的是打造如下所示的终端开发环境，涉及<code>terminal</code>、<code>shell</code>以及<code>editor</code>等，着重于配色。</p>

<p><img src="/images/zsh.png"></p>

<!--more-->


<p><code>terminal</code>不必多说，<code>iTerm2</code>是<code>Mac</code>下的不二选择，不解释了。如果你在<code>windows</code>上开发，推荐使用<code>Putty</code>，当然了跟<code>iTerm2</code>不是同个级别的东西。</p>

<p>关于<code>shell</code>，我之前一直在<code>bash</code>上瞎折腾，认为最普适的就是最好的。毕竟在绝大多数机器环境上，<code>bash</code>唾手可得，不需要额外安装。但是，<code>bash</code>没有足够丰富的现成配置方案可用，自己山寨要花很多精力而且效果也不是很好。<code>zsh</code>就不一样，名字就透着<code>shell</code>终结者的意思。<code>zsh</code>比<code>bash</code>要好用，而且有现成的配置方案，特别是<code>oh-my-zsh</code>，非常好用。</p>

<p><img src="/images/vim.png"></p>

<p>关于<code>editor</code>，向来都有<code>vim</code>或<code>emacs</code>的争议。我只使用过<code>vim</code>，也没法评论。争议是没有必要的，如果都没用过，选一个学一下就是；如果用过其中之一，维持现状即可；想两个都体验一下也行，找到适合自己的才是最重要的。我习惯使用<code>vim</code>，下文便以<code>vim</code>为例好了。</p>

<h1>iTerm2</h1>

<p><code>iTerm2</code>是<code>Mac</code>下一款优秀的终端软件，功能比内置的<code>iTerm</code>强很多。关键是，这款应用还是免费的！赶紧到<a href="https://www%0A.iterm2.com/">www.iterm2.com</a>下载吧！安装后，它是这个样子的：</p>

<p><img src="/images/iterm2-default.png"></p>

<p>呃，颜色货不对版呀！对的，这是<code>iTerm2</code>默认的颜色，别心急，接下来我们来调整配色方案。</p>

<h2>配色</h2>

<p><a href="http://ethanschoonover.com/solarized">solarized</a>是一套好看又不伤眼的配置方案，很多人推荐，目前托管在<a href="https://github.com/altercation/solarized">github</a>上。接下来，我们看看怎么给<code>iTerm2</code>加上<code>solarized</code>配色。</p>

<p>首先，将<code>solarized</code>下载到本地：</p>

<pre><code>git clone git@github.com:altercation/solarized.git
</code></pre>

<p>可以看到，里面包罗万象，这里我们要使用的是<code>iterm2-colors-solarized</code>目录下的，包括<code>Solarized Dark.itermcolors</code>和<code>Solarized Light.itermcolors</code>两个配置文件。</p>

<p><img src="/images/iterm2-color.png"></p>

<p>打开<code>Preferences-&gt;Profiles-&gt;Color</code>面板，在<code>Color Presets</code>中将以上两个配置方案导入，然后选择<code>Solarized Dark</code>或者<code>Solarized Light</code>即可。一般推荐使用<code>Solarized Dark</code>，<code>Solarized Light</code>有种亮瞎的感觉。配色搞定后，终端是这样子的：</p>

<p><img src="/images/iterm2-solarized.png"></p>

<p>看着这样柔和的颜色，眼睛就不会很容易就累了。</p>

<h1>zsh</h1>

<p><code>shell</code>提示符高亮及<code>git</code>代码状态展示是怎么实现的呢？这就要说到强大的<code>zsh</code>了。不废话，<code>Mac</code>下应该是内置的了；<code>Linux</code>下运行<code>apt-get install zsh</code>即可安装；<code>Windows</code>下烫烫烫烫烫。</p>

<h2>配置</h2>

<p>接下来，用<a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a>来武装<code>zsh</code>，一行命令搞定：</p>

<pre><code>sh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"
</code></pre>

<h2>主题</h2>

<p><code>oh-my-zsh</code>中提供了多套主题可供选择，有不同的输出样式及配色。默认应该是<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes#robbyrussell">robbyrussell</a>，感觉中规中矩没啥亮点。翻看了一下，发现了<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes#agnoster">agnoster</a>主题，感觉非常入眼。</p>

<p>接下来，编辑<code>~/.zshrc</code>，找到变量<code>ZSH_THEME</code>将其赋值改为<code>agnoster</code>即可。操作完毕，发现离目标很近了：</p>

<p><img src="/images/zsh-font-fault.png"></p>

<p>除了有些字体显示异常，什么鬼？</p>

<h2>字体</h2>

<p>为了显示正常，需要安装<code>powerline</code>字体，方法如下：</p>

<pre><code>git clone git@github.com:powerline/fonts.git
cd fonts
./install
</code></pre>

<p>然后，在<code>iTerm2-&gt;Preferences-&gt;Profiles-&gt;Text</code>面板中将<code>Non-ASCII Font</code>改成<code>Roboto Mono Powerline</code>，显示就正常了！</p>

<p><img src="/images/iterm2-text.png"></p>

<h1>vim</h1>

<p> <code>vim</code>配置这个话题有点大，包括：代码静态检查、高亮、文件树等等。理论上，通过插件，可以将<code>vim</code>打造成一个<code>IDE</code>，后续有空专门介绍一下。这节聚焦在：<code>vim</code>配色主题。</p>

<p>这里还是使用<code>solarized</code>配色方案：</p>

<pre><code>mkdir -p ~/.vim/colors
cd solarized
cp vim-colors-solarized/colors/solarized.vim ~/.vim/colors/
</code></pre>

<p>编辑<code>~/.vimrc</code>文件，加上：</p>

<pre><code>syntax enable
set background=dark
colorscheme solarized
</code></pre>

<p>这样，打开<code>vim</code>看到的就是文件开头图片显示的效果了。</p>

<h1>自动化配置</h1>

<p>如果只在自己的电脑上配置，手工操作一遍是没有问题的。但是，现实是，每个人可能都有多个不同的开发环境：自己的<code>PC</code>、公司的<code>PC</code>、线上的机器等等。每台机器都这样手工配置一遍，繁琐而且容易出错，感觉不敢想。</p>

<p>程序猿是一种有懒癌的动物，一件事情绝不重复做第二遍。如果，可以将以上配置操作脚本化，在一个新的机器环境，跑一下脚本就搞定一切，那多好！这就是我维护一个<code>conf</code>代码仓库的初衷。</p>

<p><code>conf</code>提供一个脚本，<code>install</code>用来按照各种配置。比如，运行以下命令，<code>zsh</code>和<code>vim</code>的配置就安装完毕了。</p>

<pre><code>cd conf
./install zsh
./install vim
</code></pre>

<p>当然了，<code>conf</code>完全是按照我个人的喜好定制的，可能并不适合你。尽管如此，你可以参考它打造属于自己的自动化配置工具。<strong>时间应该用来做有趣的事情，而不是浪费在简单的重复中</strong>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac下Ruby安装小结]]></title>
    <link href="http://blog.fasionchan.com/blog/2016/12/08/mac-xia-ruby-an-zhuang-xiao-jie/"/>
    <updated>2016-12-08T22:29:43+08:00</updated>
    <id>http://blog.fasionchan.com/blog/2016/12/08/mac-xia-ruby-an-zhuang-xiao-jie</id>
    <content type="html"><![CDATA[<p>最近，重新拿起博客，发现已有一年多没有动过的<code>Octopress</code>跑不起来了，囧。并不意外，每次<code>Mac</code>一升级，总有一些东西会挂掉，久而久之习惯了。</p>

<p>如何让<code>Octopress</code>重新跑起来呢？重新看安装文档，大头只是安装一个<code>ruby</code>而已。但是，由于对<code>ruby</code>并不熟悉，中间还是踩了个大坑。因此，有必要记一下，免得以后再犯。</p>

<!--more-->


<h1>安装rbenv</h1>

<p><code>rbenv</code>是什么鬼？</p>

<p>我们知道，系统本来已经有一个<code>ruby</code>了，不信命令行运行<code>which ruby</code>看看。这个是系统自带的，一般版本都是极其老的。然而，我们在用一些软件环境时，却是需要某个特定版本<code>ruby</code>的。这时，你可以选择重新编译一个，然后进行安装。问题是，安装到系统这个动作太暴力了，影响范围略大，可能会搞挂其他东西。如果可以安装多个版本的<code>ruby</code>，与系统独立，按需使用，那敢情好。<code>rbenv</code>就是这样的工具~</p>

<p>好吧，那么要怎么安装呢？<code>Mac</code>下，一般用<code>brew</code>安装软件，<code>rbenv</code>也不例外：</p>

<pre><code>brew update
brew install rbenv
brew install ruby-build
</code></pre>

<h1>安装ruby</h1>

<p><code>rbenv</code>完成安装后，<code>ruby</code>的安装就没有任何难度了：</p>

<pre><code>rbenv install 1.9.3-p0
rbenv local 1.9.3-p0
rbenv rehash
</code></pre>

<p>好吧，这么说来，写这篇文章有什么意义呢？别急，下面不是还有<strong>坑</strong>一节嘛~</p>

<h1>坑</h1>

<p>上面的安装步骤正确操作完，我发现<code>ruby</code>缺不是用<code>rbenv local</code>选定的版本！我运行<code>which ruby</code>看到还是用系统的，什么鬼！</p>

<p>确定<code>rbenv</code>没生效，但暂时不知道为什么。我猜<code>rbenv</code>应该是通过<code>PATH</code>环境变量生效的，但是看了一下并没有什么变化。<code>rbenv help</code>也看不到任何关于生效的内容，无奈只能<code>Google</code>了。</p>

<p><code>F*ck!</code>确实需要做点什么才能生效，<code>rbenv init</code>就是需要做的内容，但是<code>rbenv help</code>一个字也没提？</p>

<pre><code>$ rbenv init
# Load rbenv automatically by appending
# the following to ~/.bashrc:

eval "$(rbenv init -)"
</code></pre>

<p><code>shell</code>下运行<code>eval "$(rbenv init -)"</code>后，再运行<code>which ruby</code>就看到确实生效了！这个操作最好根据指引放到<code>.bashrc</code>里，这样就不要要每次都要运行一遍。</p>
]]></content>
  </entry>
  
</feed>
