<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Kernel | fasionchan]]></title>
  <link href="http://blog.fasionchan.com/blog/categories/kernel/atom.xml" rel="self"/>
  <link href="http://blog.fasionchan.com/"/>
  <updated>2017-07-05T19:22:12+08:00</updated>
  <id>http://blog.fasionchan.com/</id>
  <author>
    <name><![CDATA[陈彦霏]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Procfs伪文件系统原理]]></title>
    <link href="http://blog.fasionchan.com/blog/2017/06/16/procfs-wei-wen-jian-xi-tong-yuan-li/"/>
    <updated>2017-06-16T14:58:23+08:00</updated>
    <id>http://blog.fasionchan.com/blog/2017/06/16/procfs-wei-wen-jian-xi-tong-yuan-li</id>
    <content type="html"><![CDATA[<p><code>Linux</code>系统<code>/proc</code>目录下，有一些特殊的目录和文件，用来展示或者设置内核数据。例如，<code>/proc/meminfo</code>展示系统内存信息：</p>

<pre><code>$ cat /proc/meminfo
MemTotal:         506160 kB
MemFree:           73528 kB
MemAvailable:     335160 kB
Buffers:           54756 kB
Cached:           162888 kB
SwapCached:            0 kB
Active:           247648 kB
Inactive:          96840 kB
Active(anon):     127044 kB
Inactive(anon):     4332 kB
Active(file):     120604 kB
Inactive(file):    92508 kB
Unevictable:           0 kB
Mlocked:               0 kB
SwapTotal:             0 kB
SwapFree:              0 kB
Dirty:               104 kB
Writeback:             0 kB
AnonPages:        126824 kB
Mapped:            14412 kB
Shmem:              4532 kB
Slab:              70608 kB
SReclaimable:      59128 kB
SUnreclaim:        11480 kB
KernelStack:        2928 kB
PageTables:         3028 kB
NFS_Unstable:          0 kB
Bounce:                0 kB
WritebackTmp:          0 kB
CommitLimit:      253080 kB
Committed_AS:     530132 kB
VmallocTotal:   34359738367 kB
VmallocUsed:        5536 kB
VmallocChunk:   34359731707 kB
HardwareCorrupted:     0 kB
AnonHugePages:         0 kB
HugePages_Total:       0
HugePages_Free:        0
HugePages_Rsvd:        0
HugePages_Surp:        0
Hugepagesize:       2048 kB
DirectMap4k:       69568 kB
DirectMap2M:      454656 kB
</code></pre>

<p>这些数据随着系统的变化动态调整，感觉好神奇！</p>

<!--more-->


<p>还有一些文件，直接跟一些内核变量映射。除了可以读出数据，还可以更新数据呢。例如，<code>/proc/sys/net/ipv4/ip_forward</code>用来控制<code>IP</code>包转发，设置为<code>1</code>则是是启用转发：</p>

<pre><code>$ cat /proc/sys/net/ipv4/ip_forward
0
echo "1" &gt; /proc/sys/net/ipv4/ip_forward
$ cat /proc/sys/net/ipv4/ip_forward
1
</code></pre>

<p>那么，这些文件本质是什么呢？是真正的文件吗？</p>

<h2>来龙去脉</h2>

<p>系统用户和程序(进程)经常需要某些内核信息，该怎么获得呢？</p>

<p>以<code>/proc/sys/net/ipv4/ip_forward</code>为例，内核里有一个变量用来控制协议栈是否转发<code>IP</code>包。系统用户要控制转发是否开启，就需要去设置这个内核变量。怎么设置呢？要知道用户空间可是没有办法直接访问内核空间的。</p>

<p>可以考虑实现一个新的系统调用——<code>int set_ip_forward(int value)</code>。然而，天呀有好多这样或那样的场景，这样系统调用表是要爆炸的！而且这种方式用起来也麻烦，需要实现一个专用的命令，调用这个系统调用完成设置。</p>

<p>有没有更通用的方式呢？其实，让这个系统调用更加通用化，也是一种思路——<code>int set_kernel_value(char *path, void *value)</code>。这样一个系统调用就搞定了一些列设置要求，但是还是没有解决调用麻烦的问题。</p>

<p>如果，可以将内核数据伪装成一个文件，用<code>read</code>系统调用获取；用<code>write</code>系统调用设置不就完美了吗？这样，有现成的命令可以直接使用，比如用<code>cat</code>来获取，用<code>echo</code>来设置！</p>

<p>那么内核有办法做到吗？</p>

<p>办法肯定是有的。最直观的想法是，在内核处理<code>read</code>的代码进行控制，让<code>read</code>直接从内核数据中拷贝，而不是磁盘。当然了，内核黑客们不会写这么恶心的代码，而是抽象了一层——<code>VFS</code>。</p>

<h2>VFS</h2>

<p><code>Linux</code>支持各种各样的文件系统，光<code>ext</code>系列就有：<code>ext2</code>、<code>ext3</code>、<code>ext4</code>。内核如何实现不同文件系统差异性的呢？</p>

<p>答案是，内核抽象了<code>VFS</code>接口。跟面向对象编程中的接口有点类似，具体的文件系统按照各自的方式分别实现(多态)。</p>

<p><img src="http://upload-images.jianshu.io/upload_images/2740477-e2afa3b8415de815.gif?imageMogr2/auto-orient/strip" alt="archi_VFS-eng.gif" /></p>

<p>如上图所示，不同的文件系统以各自的方式实现处理接口，如<code>read</code>和<code>write</code>等等。这些处理接口被封装成结构一致的结构体注册。这样，同样的系统调用，在不同的文件系统下，由不同的函数处理。</p>

<p>因此，完全有可能实现一个假的文件系统，就叫<code>procfs</code>，读写分别映射为变量的读出和写入。</p>

<h2>流程</h2>

<p>最后，图解说明访问<code>/proc</code>下文件的整个流程：</p>

<p><img src="http://upload-images.jianshu.io/upload_images/2740477-d7d7a62d6c2c427d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="procfs" /></p>

<ol>
<li>用户进程发起一个系统调用<code>read</code>；</li>
<li>内核<code>VFS</code>根据文件描述符找出操作描述体；</li>
<li>内核从描述体取出<code>read</code>处理函数指针；</li>
<li>内核执行该处理函数；</li>
<li>处理函数读出内核变量并拷贝到用户态空间；</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux内核模块]]></title>
    <link href="http://blog.fasionchan.com/blog/2017/06/14/linux-nei-he-mo-kuai/"/>
    <updated>2017-06-14T11:37:33+08:00</updated>
    <id>http://blog.fasionchan.com/blog/2017/06/14/linux-nei-he-mo-kuai</id>
    <content type="html"><![CDATA[<p>Linux内核管理着一台计算机的所有资源，为上层应用程序提供统一的编程接口(系统调用)，屏蔽底层设备的差异。
由于不同用户物理设备以及对内核功能需求的差异性，需要一种类似插件的运行机制——编写插件实现所需功能，然后嵌入到内核中，与内核形成一个整体。</p>

<p><strong>Linux内核模块</strong>便是这样的插件。作为Linux内核的扩展手段，可以在运行时动态加载和卸载。
那么，一个内核模块是怎么编写的呢？与普通程序编写有什么区别呢？</p>

<p>程序开发经常以<code>hello world</code>程序入门，因为这是最简单的。
本文也通过一个最简单的内核模块，演示如何一步步编写一个内核模块。</p>

<!--more-->


<h1>结构</h1>

<p>内核模块与普通程序不同，没有执行流。
可以这样理解，内核模块实现一些函数，作为回调函数注册到内核中。
在内核加载/卸载时，或者其他应用程序调用系统调用时，注册的回调函数才得到调用。</p>

<p>有两个最基本的回调函数<code>init</code>和<code>exit</code>，分别由<code>module_init</code>和<code>module_exit</code>登记，分别在模块加载和卸载的时候执行。
下面实现的<code>hello world</code>内核模块，将只实现这两个最基本的函数。</p>

<p>内核模块支持参数，用户借此控制内核模块的行为。
参数有默认值，可以在加载时指定，也可以在通过<code>proc</code>伪文件系统等手段动态修改。</p>

<p>此外，内核模块还需要带一些描述信息，包括许可证、作者、描述以及版本等等。
描述信息由<code>MODULE_</code>系列宏指定，<code>modinfo</code>等命令可以展示这些信息。</p>

<h1>编码</h1>

<p>开干了！新建一个文件，<code>hello.c</code>用于实现一个玩具型内核模块——<code>hello</code>模块。</p>

<p><code>hello</code>模块只实现<code>init</code>和<code>exit</code>函数，分别在加载和卸载时往内核日志输出一条记录。
同时，也演示了参数的使用方式——通过参数控制日志输出内容。</p>

<pre><code class="c">/**
 * FileName:   hello.c
 * Author:     Chen Yanfei
 * @contact:   fasionchan@gmail.com
 * @version:   $Id$
 *
 * Description:
 *
 * Changelog:
 *
 **/

// 引入相关内核头文件
#include &lt;linux/module.h&gt;

// 内核模块信息，包括许可证、作者、描述和版本等
MODULE_LICENSE("GPL");
MODULE_AUTHOR("Fasion Chan");
MODULE_DESCRIPTION("An hello worlk module for demonstration");
MODULE_VERSION("1.0");

// 内核模块参数，加载时指定或者动态指定，以此控制模块行为
static char *name = "world";
module_param(name, charp, S_IRUGO);
MODULE_PARM_DESC(name, "Whom this module say hello to");


// 初始化函数，在加载时调用，分配资源准备执行环境
// 这里只是往内核日志输出一行记录
static int __init hello_init(void)
{
    printk(KERN_INFO "HELLO: Hello %s, this is hello module speaking\n", name);
    return 0;
}


// 清理函数，在卸载时调用，回收资源销毁执行环境
static void __exit hello_exit(void)
{
    printk(KERN_INFO "HELLO: Goodbye %s", name);
}

// 登记初始化函数及清理函数
module_init(hello_init);
module_exit(hello_exit);
</code></pre>

<h1>编译</h1>

<p>内核模块代码已经写好了，怎样知道写得对不对呢？编译运行一下不就知道了？
可问题是如何编译呢？跟普通程序一样吗？用<code>gcc</code>来编译？</p>

<p>没错，内核模块用<code>gcc</code>来编译，但不会直接运行<code>gcc</code>。
我们需要先准备一个<code>Makefile</code>，内容如下：</p>

<pre><code>obj-m+=hello.o

all:
    make -C /lib/modules/$(shell uname -r)/build/ M=$(PWD) modules

clean:
    make -C /lib/modules/$(shell uname -r)/build/ M=$(PWD) modules
</code></pre>

<p>好了之后，我们再命令行下运行<code>make</code>即可：</p>

<pre><code>$ ls
hello.c  Makefile
$ make
make -C /lib/modules/3.16.0-4-amd64/build/ M=/home/fasion/hello modules
make[1]: Entering directory '/usr/src/linux-headers-3.16.0-4-amd64'
make[1]: Entering directory `/usr/src/linux-headers-3.16.0-4-amd64'
  CC [M]  /home/fasion/hello/hello.o
  Building modules, stage 2.
  MODPOST 1 modules
  CC      /home/fasion/hello/hello.mod.o
  LD [M]  /home/fasion/hello/hello.ko
make[1]: Leaving directory '/usr/src/linux-headers-3.16.0-4-amd64'
$ ls
hello.c  hello.ko  hello.mod.c  hello.mod.o  hello.o  Makefile  modules.order  Module.symvers
</code></pre>

<p>看到<code>hello.ko</code>文件生成，意味着编译大功告成了！
该文件就是二进制内核模块目标文件，其他文件的作用不再讨论了。</p>

<p>顺便提一句，<code>Makefile</code>中分成<code>all</code>和<code>clean</code>两节。
其中<code>all</code>用来编译，<code>clean</code>用来清理编译环境：</p>

<pre><code>$ make clean
make -C /lib/modules/3.16.0-4-amd64/build/ M=/home/fasion/hello clean
make[1]: Entering directory '/usr/src/linux-headers-3.16.0-4-amd64'
make[1]: Entering directory `/usr/src/linux-headers-3.16.0-4-amd64'
  CLEAN   /home/fasion/hello/.tmp_versions
  CLEAN   /home/fasion/hello/Module.symvers
make[1]: Leaving directory '/usr/src/linux-headers-3.16.0-4-amd64'
$ ls
hello.c  Makefile
</code></pre>

<p>可以看到，运行了<code>make clean</code>后，所有编译生成的文件都清理掉了，只剩源码文件和<code>Makefile</code>。</p>

<h1>运行</h1>

<p>内核模块编译完成后，要怎么使用呢？跟普通程序直接运行不同，内核模块需要加载到内核里面发挥作用。使用<code>insmod</code>命令加载内核模块：</p>

<pre><code>$ ls
hello.c  hello.ko  hello.mod.c  hello.mod.o  hello.o  Makefile  modules.order  Module.symvers
$ sudo insmod hello.ko
$ dmesg
[   14.226777] 00:00:00.000718 main     OS Product: Linux
[   14.226814] 00:00:00.000779 main     OS Release: 3.16.0-4-amd64
[   14.226845] 00:00:00.000814 main     OS Version: #1 SMP Debian 3.16.7-ckt20-1+deb8u4 (2016-02-29)
[   14.226873] 00:00:00.000844 main     OS Service Pack: #1 SMP Debian 3.16.7-ckt20-1+deb8u4 (2016-02-29)
[   14.226912] 00:00:00.000872 main     Executable: /opt/VBoxGuestAdditions-5.0.8/sbin/VBoxService
00:00:00.000873 main     Process ID: 716
00:00:00.000874 main     Package type: LINUX_64BITS_GENERIC
[   14.232015] 00:00:00.005962 main     5.0.8 r103449 started. Verbose level = 0
[ 4368.359895] HELLO: Hello world, this is hello module speaking
</code></pre>

<p>内核模块加载后，用<code>dmesg</code>命令看到，内核模块初始化时输出的一条内核日志。</p>

<p>加载内核模块时怎么指定参数的值呢？下面演示移除内核模块，并以<code>fasion</code>为<code>name</code>参数值重新挂载：</p>

<pre><code>$ sudo rmmod hello
$ sudo insmod hello.ko name=fasion
</code></pre>

<p>操作完成后，用<code>dmesg</code>可以看到以下内核日志：</p>

<pre><code>[ 4368.359895] HELLO: Hello world, this is hello module speaking
[ 4812.067761] HELLO: Goodbye world
[ 4841.011892] HELLO: Hello fasion, this is hello module speaking
</code></pre>

<p>第二次挂载时，<code>name</code>参数的值不是默认值<code>world</code>，而是<code>fasion</code>了。</p>

<p>跟内核模块相关还有<code>insmod</code>、<code>rmmod</code>、<code>lsmod</code>、<code>modinfo</code>、<code>modprobe</code>等命令，用法请参考<code>man</code>文档。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解CFS调度算法]]></title>
    <link href="http://blog.fasionchan.com/blog/2014/07/05/li-jie-cfs-diao-du-suan-fa/"/>
    <updated>2014-07-05T09:33:26+08:00</updated>
    <id>http://blog.fasionchan.com/blog/2014/07/05/li-jie-cfs-diao-du-suan-fa</id>
    <content type="html"><![CDATA[<p><code>Completely Fair Scheduler</code>(<code>CFS</code>)，即<strong>完全公平调度器</strong>，是<code>Linux</code>内核从<code>2.6.23</code>版本开始引入的进程调度器。</p>
]]></content>
  </entry>
  
</feed>
