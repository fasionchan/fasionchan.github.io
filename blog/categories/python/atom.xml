<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | fasionchan]]></title>
  <link href="http://blog.fasionchan.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://blog.fasionchan.com/"/>
  <updated>2016-12-11T10:55:17+08:00</updated>
  <id>http://blog.fasionchan.com/</id>
  <author>
    <name><![CDATA[陈彦霏]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python调试终端]]></title>
    <link href="http://blog.fasionchan.com/blog/2016/12/09/python-diao-shi-zhong-duan/"/>
    <updated>2016-12-09T18:58:43+08:00</updated>
    <id>http://blog.fasionchan.com/blog/2016/12/09/python-diao-shi-zhong-duan</id>
    <content type="html"><![CDATA[<p>后端服务程序开发运营过程中，难免会遇到一些BUG疑难杂症，是日志输出等调试手段无法定位的。
如有有一个工具，可以连上服务程序，查询服务中间状态或者修改程序变量，势必加速问题定位及解决。</p>

<p>本模块就是您想要的工具~</p>

<!--more-->


<h1>安装</h1>

<p>模块代码已经在<code>github</code>上开源：<a href="https://github.com/fasionchan/libase/blob/master/libase/server/console.py">libase.server.console</a>，可以直接把代码<code>clone</code>下来安装。</p>

<pre><code>$ git clone https://github.com/fasionchan/libase.git
$ cd libase
$ python setup.py install
</code></pre>

<p>当然了，<code>libase</code>也已经发布到<a href="https://pypi.python.org/pypi">PyPI</a>上了。因此，更方便的安装方式是使用<code>pip</code>：</p>

<pre><code>pip install libase
</code></pre>

<h1>服务接入</h1>

<p>需要远程调试的程序可以用<code>start_console_server</code>快捷启动一个远程调试终端服务。
然后，使用<code>pyconsole</code>命令便可以连上该程序，并初始化一个<code>Python</code>控制台用于调试了。</p>

<pre><code>import time

from libase.server.console import start_console_server

counter = 0

start_console_server()

while True:
    print counter
    counter += 1
    time.sleep(1)
</code></pre>

<p>例子是一个计算程序，使用<code>start_console_server</code>接入远程调试终端服务，端口为默认值<code>4444</code>。</p>

<h3>连接调试</h3>

<p><code>libase</code>提供一个用于连接远程调试终端的程序<code>pyconsole</code>，以访问上述程序为例：</p>

<pre><code class="html">$ pyconsole 4444
Python 2.7.3 (default, Jan  2 2013, 13:56:14)
[GCC 4.7.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
(ConsoleProxy)
&gt;&gt;&gt; print main.counter
93
&gt;&gt;&gt; main.counter = 0
&gt;&gt;&gt; print main.counter
1
&gt;&gt;&gt; print main.counter
2
</code></pre>

<p>注意到，默认已经将进程的<code>__main__</code>模块引入到当前名字空间，名为<code>main</code>，其效果等同于在<code>pyconsole</code>中执行<code>import __main__ as main</code>。</p>

<h1>高级用法</h1>

<h2>接口文档</h2>

<h3>start_console_server</h3>

<p><strong>start_console_server(port=4444, addr=&lsquo;localhost&rsquo;, &lsquo;code&rsquo;=&lsquo;&rsquo;)</strong></p>

<p>接入远程调试终端服务，返回一个<code>ConsoleServer</code>对象。</p>

<ul>
<li>port 远程调试终端服务监听的端口，默认为<code>4444</code></li>
<li>addr 远程调试终端服务监听的地址，可以为<code>IP</code>或者机器名，默认为<code>localhost</code></li>
<li>code 初始化代码，可用于预先引入一些对象到终端所在名字空间</li>
</ul>


<h3>run_console_proxy</h3>

<p><strong>run_console_proxy(port=4444, addr=&lsquo;localhost&rsquo;)</strong></p>

<p>以给定地址端口信息，连上接入远程调试终端的服务，并启动一个<code>Python</code>控制台。</p>

<ul>
<li>port 远程调试终端所在端口，默认为<code>4444</code></li>
<li>addr 远程调试中断所在机器地址，可以是<code>IP</code>或者机器名，默认为<code>localhost</code></li>
</ul>


<h2>工具命令</h2>

<h3>pyconsole</h3>

<p>用法：pyconsole [port] [addr]</p>

<ul>
<li>port 远程调试终端所在端口，默认为<code>4444</code></li>
<li>addr 远程调试中断所在机器地址，可以是<code>IP</code>或者机器名，默认为<code>localhost</code></li>
</ul>


<p>该命令，只是把<code>run_console_proxy</code>命令化，实现如下：</p>

<pre><code>import sys
import rlcompleter

from libase.server.console import run_console_proxy

if __name__ == '__main__':
    run_console_proxy(*sys.argv[1:])
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用gdb调试Python程序]]></title>
    <link href="http://blog.fasionchan.com/blog/2016/12/07/shi-yong-gdb-tiao-shi-python-cheng-xu/"/>
    <updated>2016-12-07T22:51:29+08:00</updated>
    <id>http://blog.fasionchan.com/blog/2016/12/07/shi-yong-gdb-tiao-shi-python-cheng-xu</id>
    <content type="html"><![CDATA[<p>最近在为一个监控系统开发<code>agent</code>，需要支持<code>Linux</code>、<code>FreeBSD</code>及<code>Windows</code>等操作系统。复杂的线上环境，带来了一系列诡异的问题，尽管代码上线前在为数不少的测试机器验证过。</p>

<p><code>Python</code>程序吐<code>coredump</code>文件怎么办？很多人都会想到<code>gdb</code>加载<code>coredump</code>文件，然后查看信号及堆栈信息，以此分析原因。堆栈信息在调试中非常有用，但是别忘了，你写的是<code>Python</code>代码，但是<code>gdb</code>给你的是<code>C</code>堆栈信息！似乎没啥鸟用！难道要撸<code>Python</code>源码然后分析各种核心数据结构吗？有什么方式可以查看到<code>Python</code>堆栈信息吗？</p>

<p>还遇到过另一个问题，一个<code>Python</code>进程突然间陷入死循环，所有其他线程都调度不到。遇到这种情况，首先可能需要知道死循环到底在干什么。如何获悉呢？可能用<code>strace</code>跟一下系统调用可以看出一点端倪。但是一个堆栈信息更为具体更有说服力，就算是只有<code>C</code>堆栈信息有时也是足以说明问题的。</p>

<p><code>gdb</code>就可以解决以上难题(其实远不止)，接下来，我们一起看看具体要怎么操作吧~</p>

<!--more-->


<h1>准备</h1>

<p>首先得有<code>gdb</code>吧，这个就不细说了，<code>debian</code>系发行版上运行以下命令完成安装：</p>

<pre><code>apt-get install gdb
</code></pre>

<p>其次，还需要装一个包——<code>python-dbg</code>。这个包有什么作用呢？前面不是抱怨过<code>C</code>堆栈对于调试一个<code>Python</code>有何用？我们更需要的是<code>Python</code>堆栈信息，<code>python-dbg</code>就是为了完成这个使命。</p>

<h1>运行</h1>

<p>全新启动一个<code>Python</code>程序并进行调试，可以采用交互式方式，先启动<code>gdb</code>然后在<code>gdb shell</code>中启动<code>Python</code>程序：</p>

<pre><code>$ gdb python
...
(gdb) run &lt;programname&gt;.py &lt;arguments&gt;
</code></pre>

<p>当然了，也可以一步到位，一条命令搞定这两步：</p>

<pre><code>gdb -ex r --args python &lt;programname&gt;.py &lt;arguments&gt;
</code></pre>

<p>遗憾的是，现实中往往是这样的情景——一个正在运行的程序突然异常了，你需要调试它！这时为之奈何？</p>

<p>有一种方法你可以给它发一个信号，出一个<code>coredump</code>文件，然后用<code>gdb</code>来调试<code>coredump</code>文件：</p>

<pre><code>gdb &lt;coredump_file&gt;
</code></pre>

<p>显然易见，这并不是一种很好的方式，那么有没有什么办法可以捕获进程并调试呢？你想得到的很有可能都有人实现了——</p>

<pre><code>gdb python &lt;process id&gt;
</code></pre>

<pre><code>gdb attach &lt;process id&gt;
</code></pre>

<p>这两种方式都可以让<code>gdb</code>捕获一个进程。因此，我们需要做的只是确定问题进程的<code>pid</code>，这个总该没有难度了吧——<code>top</code>、<code>ps</code>等等一系列命令都可以做到。</p>

<h1>堆栈查看</h1>

<p>查看<code>C</code>堆栈信息，用过<code>gdb</code>命令的估计都知道怎么做：</p>

<pre><code>(gdb) bt
#0 0x0000002a95b3b705 in raise () from /lib/libc.so.6
#1 0x0000002a95b3ce8e in abort () from /lib/libc.so.6
#2 0x00000000004c164f in posix_abort (self=0x0, noargs=0x0) at ../Modules/posixmodule.c:7158
#3 0x0000000000489fac in call_function (pp_stack=0x7fbffff110, oparg=0) at ../Python/ceval.c:3531
#4 0x0000000000485fc2 in PyEval_EvalFrame (f=0x66ccd8) at ../Python/ceval.c:2163
...
</code></pre>

<p>那么，怎么查看<code>Python</code>堆栈呢。安装<code>python-gdb</code>之后，<code>gdb</code>会提供若干相关的操作。其中<code>py-bt</code>就是用来查看<code>Python</code>堆栈的：</p>

<pre><code>(gdb) py-bt
</code></pre>

<h1>线程查看</h1>

<p>调试多线程程序，首先总得搞清楚到底有哪些线程吧：</p>

<pre><code>(gdb) info threads
 Id Target Id Frame
  37 Thread 0xa29feb40 (LWP 17914) "NotificationThr" 0xb7fdd424 in __kernel_vsyscall ()
  36 Thread 0xa03fcb40 (LWP 17913) "python2.7" 0xb7fdd424 in __kernel_vsyscall ()
  35 Thread 0xa0bfdb40 (LWP 17911) "QProcessManager" 0xb7fdd424 in __kernel_vsyscall ()
  34 Thread 0xa13feb40 (LWP 17910) "python2.7" 0xb7fdd424 in __kernel_vsyscall ()
  33 Thread 0xa1bffb40 (LWP 17909) "python2.7" 0xb7fdd424 in __kernel_vsyscall ()
  31 Thread 0xa31ffb40 (LWP 17907) "QFileInfoGather" 0xb7fdd424 in __kernel_vsyscall ()
  30 Thread 0xa3fdfb40 (LWP 17906) "QInotifyFileSys" 0xb7fdd424 in __kernel_vsyscall ()
  29 Thread 0xa481cb40 (LWP 17905) "QFileInfoGather" 0xb7fdd424 in __kernel_vsyscall ()
  7  Thread 0xa508db40 (LWP 17883) "QThread" 0xb7fdd424 in __kernel_vsyscall ()
  6  Thread 0xa5cebb40 (LWP 17882) "python2.7" 0xb7fdd424 in __kernel_vsyscall ()
  5  Thread 0xa660cb40 (LWP 17881) "python2.7" 0xb7fdd424 in __kernel_vsyscall ()
  3  Thread 0xabdffb40 (LWP 17876) "gdbus" 0xb7fdd424 in __kernel_vsyscall ()
  2  Thread 0xac7b7b40 (LWP 17875) "dconf worker" 0xb7fdd424 in __kernel_vsyscall ()
* 1  Thread 0xb7d876c0 (LWP 17863) "python2.7" 0xb7fdd424 in __kernel_vsyscall ()
</code></pre>

<p>请注意<code>*</code>号哦——它标识的是当前线程。</p>

<p>那么如何切换线程呢？</p>

<pre><code>(gdb) thread 37
</code></pre>

<p>这样就将37号线程设置为当前线程进行调试了。</p>

<p>好，那么怎么查看当前线程的相关信息呢？上节中，<code>py-bt</code>可以帮上忙——至少知道线程的执行堆栈。还有一个操作<code>py-list</code>，可以清楚看到当前执行到代码的第几行，还有前后若干行的代码可以对照哦：</p>

<pre><code>(gdb) py-list
2025         # Open external files with our Mac app
2026         if sys.platform == "darwin" and 'Spyder.app' in __file__:
2027             main.connect(app, SIGNAL('open_external_file(QString)'),
2028                          lambda fname: main.open_external_file(fname))
2029
&gt;2030        app.exec_()
2031         return main
2032
2033
2034     def __remove_temp_session():
2035         if osp.isfile(TEMP_SESSION_PATH):
</code></pre>

<p>还有更6的，查看所有进程执行位置，非常方便有木有：</p>

<pre><code>(gdb) thread apply all py-list
...
 200
 201         def accept(self):
&gt;202             sock, addr = self._sock.accept()
 203             return _socketobject(_sock=sock), addr
 204         accept.__doc__ = _realsocket.accept.__doc__
 205
 206         def dup(self):
 207             """dup() -&gt; socket object

Thread 35 (Thread 0xa0bfdb40 (LWP 17911)):
Unable to locate python frame

Thread 34 (Thread 0xa13feb40 (LWP 17910)):
 197             for method in _delegate_methods:
 198                 setattr(self, method, dummy)
 199         close.__doc__ = _realsocket.close.__doc__
 200
 201         def accept(self):
&gt;202             sock, addr = self._sock.accept()
 203             return _socketobject(_sock=sock), addr...
</code></pre>

<h1>参考资料</h1>

<p><a href="https://wiki.python.org/moin/DebuggingWithGdb">https://wiki.python.org/moin/DebuggingWithGdb</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自己发布Python包]]></title>
    <link href="http://blog.fasionchan.com/blog/2016/10/23/zi-ji-fa-bu-python-bao/"/>
    <updated>2016-10-23T18:50:04+08:00</updated>
    <id>http://blog.fasionchan.com/blog/2016/10/23/zi-ji-fa-bu-python-bao</id>
    <content type="html"><![CDATA[<h1>注册</h1>

<p>先在<code>Python</code>官网注册一个账号，地址是：<a href="https://pypi.python.org/pypi">https://pypi.python.org/pypi</a>。</p>

<!--more-->


<h1>配置</h1>

<p>账号注册后，就可以用其来登记新建的<code>Python</code>包，以及上传包更新。上传新包一般由<code>twine</code>命令完成，<code>twine</code>需要知道<code>Python</code>仓库地址以及账号信息。因此，可以将这些信息写在配置文件<code>~/.pypirc</code>里，这样运行命令时便不需要再次输入了。配置如何写呢？以<code>foo</code>为用户名，<code>bar</code>为密码为例：</p>

<pre><code>[distutils]
index-servers=pypi

[pypi]
repository = https://pypi.python.org/pypi
username = foo
password = bar
</code></pre>

<p>其中，密码也可以不写进配置，这样每次运行<code>twine</code>时，将提示输入密码。</p>

<h1>准备</h1>

<p>编写<code>Python</code>包的过程，这里就不细说了。本文的重点是怎么将自己的<code>Python</code>包发布出去，然后可以用<code>pip</code>命令安装。</p>

<p><code>Python</code>包的实现方式可以参考。其实无非就是规划好目录结构，然后编写<code>setup.py</code>文件：</p>

<pre><code>#!/usr/bin/env python
# -*- encoding=utf8 -*-

'''
FileName:   setup.py
Author:     Fasion Chan
@contact:   fasionchan@gmail.com
@version:   $Id$

Description:

Changelog:

'''

VERSION = '1.0'

from setuptools import (
    setup,
    )

setup(
    name='libase',
    version=VERSION,
    author='Fasion Chan',
    author_email='fasionchan@gmail.com',
    packages=[
        'libase',
        ],
    scripts=[
        ],
    package_data={
        },
    install_requires=[
        ],
    )
</code></pre>

<h1>登记</h1>

<p>运行命令<code>python setup.py egg_info</code>生成包信息，找到<code>xxxx.egg_info</code>目录下<code>PKG-INFO</code>文件，在<code>Python</code>官网<a href="https://pypi.python.org/pypi?%3Aaction=submit_form">提交表单</a>上传即可。</p>

<h1>构建</h1>

<p>运行命令<code>python setup.py sdist</code>进行构建并打包。完成之后，在<code>dist</code>目录下可以看到形如<code>xxxx-1.0.tar.gz</code>的压缩包。</p>

<h1>上传</h1>

<p>运行命令<code>twine upload dist/*</code>便可将构建的所有包上传，这时便大功告成了！</p>

<h1>应用</h1>

<p>运行命令<code>pip install xxxx</code>便可以安装你发布的<code>Python</code>包了！你可以发布任何你想发布的东西，任何人也可以安装任何你发布的东西，成就感杠杠的有木有！</p>

<p>我们提倡自由分享的精神，有用的代码无私奉献出来可以节约很多人很多时间！<code>Life is short, use Python!</code></p>

<p>当然了，努力提升自己，分享高质量代码，不要坑别人哦~</p>
]]></content>
  </entry>
  
</feed>
