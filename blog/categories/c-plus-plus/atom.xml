<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C++ | fasionchan]]></title>
  <link href="http://blog.fasionchan.com/blog/categories/c-plus-plus/atom.xml" rel="self"/>
  <link href="http://blog.fasionchan.com/"/>
  <updated>2017-06-16T15:10:30+08:00</updated>
  <id>http://blog.fasionchan.com/</id>
  <author>
    <name><![CDATA[陈彦霏]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux编程环境搭建——C/C++]]></title>
    <link href="http://blog.fasionchan.com/blog/2010/06/15/linux-bian-cheng-huan-jing-da-jian-c-slash-c-plus-plus/"/>
    <updated>2010-06-15T17:17:42+08:00</updated>
    <id>http://blog.fasionchan.com/blog/2010/06/15/linux-bian-cheng-huan-jing-da-jian-c-slash-c-plus-plus</id>
    <content type="html"><![CDATA[<blockquote><p>本文是面向初学者的入门型教程，高手请忽略~</p>

<p>本文是面向初学者的入门型教程，高手请忽略~</p>

<p>本文是面向初学者的入门型教程，高手请忽略~</p></blockquote>

<p>计算机专业都有开展编程课吧，但大部分院校都是基于<code>Windows</code>平台的，包括<code>VC</code>、<code>VS</code>等等。这样的<code>IDE</code>用多了，人容易“傻”——编程可不是非得要用<code>IDE</code>！再说了，<code>IDE</code>按钮按多了，都不知道编程的本质是啥。</p>

<p>很多人想学<code>Linux</code>，摆脱<code>Windows</code>的枷锁，可是老师不教呀，作业怎么办！</p>

<p>莫慌，我们先来看看，在<code>Linux</code>下，怎样进行<code>C</code>语言程序开发吧~</p>

<!--more-->


<h2>工具</h2>

<p>工欲善其事，便先利其器。在<code>Linux</code>编程，我们需要哪些工具呢？</p>

<p>编程其实无非就是几个步骤：</p>

<ul>
<li>首先要能编辑代码并保存吧？也就是说需要一个编辑器，最简单的像记事本都可以。<code>Linux</code>下推荐用<code>vim</code>或者<code>emacs</code>，这两个都是属于学习曲线比较陡的利器(掌握后可以各种出神入化)。初学者也可以试试<code>nano</code>，简单易用。</li>
<li>代码写完后，怎么生成可执行程序呢(编译)？这时候，需要用到编译器。不同系统不同语言编译器也不尽相同。<code>Linux</code>下编译<code>C</code>代码，需要用到<code>gcc</code>；编译<code>C++</code>代码，需要用到<code>g++</code>。</li>
</ul>


<table>
<thead>
<tr>
<th style="text-align:left;">环节</th>
<th style="text-align:left;">可用工具</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">编辑</td>
<td style="text-align:left;">vim/emacs/nano</td>
</tr>
<tr>
<td style="text-align:left;">编译</td>
<td style="text-align:left;">gcc/g++</td>
</tr>
</tbody>
</table>


<p>下面，以<code>Ubuntu</code>为例，介绍一下如何安装这些工具：</p>

<h3>安装编译器</h3>

<p><code>Ubuntu</code>下使用<code>apt</code>进行装包：</p>

<pre><code>$ apt-get install gcc
</code></pre>

<h2>编辑代码</h2>

<p><code>shell</code>下，运行<code>nano test.c</code>，开始编辑<code>test.c</code>文件：</p>

<p><img src="http://upload-images.jianshu.io/upload_images/2740477-4bde234e7ec313c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png" /></p>

<p>这时候出现以上界面，这时候便可以开始输入了。</p>

<p>代码编辑后如何保存呢？请注意下方操作提示条，这时可以清楚知道按<code>ctrl+x</code>保存文件；按<code>ctrl+x</code>退出<code>nano</code>程序。</p>

<p>接下来请输入以下代码，保存并退出：</p>

<pre><code class="c">#include &lt;stdio.h&gt;

int main(int args, char *argv[])
{
    printf("Hello world\n");

    return 0;
}
</code></pre>

<p>这时候，在当前目录下可以看到<code>test.c</code>文件了：</p>

<pre><code>$ ls
test.c
</code></pre>

<h2>编译</h2>

<p>接下来是编译环节，运行以下命令：</p>

<pre><code>$ gcc -o test test.c
</code></pre>

<p>这个命令的意思是，运行<code>gcc</code>命令，编译<code>test.c</code>文件；<code>-o</code>表示将可执行文件保存为<code>test</code>。不出意外，在当前目录下可以看到一个名为<code>test</code>的可执行文件。</p>

<pre><code>$ ls
test test.c
</code></pre>

<h2>运行</h2>

<p>直接运行可执行文件，就可以看到程序输出的<code>Hello world</code>了：</p>

<pre><code>$ ./test
Hello world
</code></pre>

<h2>下一步</h2>

<p>看到这里，你已经掌握了<code>Linux</code>下<code>C</code>程序开发的过程！<code>C++</code>也是类似的，将<code>gcc</code>换成<code>g++</code>即可。</p>

<p>当然了，<code>Hello world</code>只是用来演示，并没有什么作用。万里长征算是迈出第一步，接下来更有挑战性的程序在等着你！</p>

<p>另外，调试也是开发中非常重要的一环，本文暂未介绍。<code>Linux</code>一般使用<code>gdb</code>进行调试，这是一个功能非常强大的工作，后续有机会818。</p>

<p><img src="http://upload-images.jianshu.io/upload_images/2740477-ec903564f7bfd9be.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/200" alt="欢迎加入玩转Linux" /></p>
]]></content>
  </entry>
  
</feed>
